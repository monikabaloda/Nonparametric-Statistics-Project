{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# This notebook does the followings: \n",
        "1. Data Cleaning \n",
        "2. Exporting new data file ready for the analysis\n",
        "3. EDA: Exploratory data analysis \n"
      ],
      "metadata": {
        "id": "MF8DaaSe4ID3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "RhrjGIg76A0L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import os\n",
        "os.chdir('/content/drive/MyDrive/Colab Notebooks/data')\n",
        "master=pd.read_stata('vdsa_master_all_yrs.dta')  #importing data file\n",
        "master=master[master['YEAR']>1965]\n",
        "master.head()\n"
      ],
      "metadata": {
        "id": "fEPI0Rbz7QKS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creating a new coloumn for fraction of total area dedicated to wheat cultivation. "
      ],
      "metadata": {
        "id": "Mk3J_pm59xNG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "master['wht_area_fraction']=master['WHT_TA']/master['tot_area']\n",
        "master['rice_area_fraction']=master['RICE_TA']/master['tot_area']"
      ],
      "metadata": {
        "id": "aEqGkUrv9JZJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "In original dataset, if wheat is not grown in the region or is unknown, it is coded as negative, so we need t clean for it."
      ],
      "metadata": {
        "id": "oJ8f7I_l-EoZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "master.loc[master[\"wht_area_fraction\"] < 0] = 0\n",
        "master.loc[master[\"wht_area_fraction\"] > 1] = 1\n",
        "master[\"wht_area_fraction\"].describe()"
      ],
      "metadata": {
        "id": "UsNelj_29vHz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "master.loc[master[\"rice_area_fraction\"] < 0] = 0\n",
        "master.loc[master[\"rice_area_fraction\"] > 1] = 1\n",
        "master[\"rice_area_fraction\"].describe()"
      ],
      "metadata": {
        "id": "mBrC-eYf_1r2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Generating a new dataframe of wheat growing districts. We select districts with wheat area as a fraction of total cultivated area being greater than a certain threshold. \n"
      ],
      "metadata": {
        "id": "E5igMYujBro7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "threshold=0.2\n",
        "master_wht=master[master[\"wht_area_fraction\"] > threshold]\n",
        "master_wht['STNAME'].value_counts()  #Looking at the frequency of states in new dataframe of wheat specialized region"
      ],
      "metadata": {
        "id": "EW5GOEwgAj1z"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for col in master_wht.columns:\n",
        "    print(col)                    #Listing the coloumns "
      ],
      "metadata": {
        "id": "aWOipndhBn7-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "master_wht=master_wht[['STCODE','STNAME','DIST', 'DISTNAME', 'YEAR',  'wht_yield', 'NPK_TC', 'tot_area',\n",
        "                        'avg_yield_value', 'wht_yield_value', 'wht_price', 'CANALS', 'TUBEWELL','ANNUAL','JULAUGRF',\n",
        "                        'wht_area_irrg_per','land_nonagri_per', 'mkt', 'wht_area_fraction','N_TC', 'P_TC','K_TC']]\n",
        "master_wht.head()      \n",
        "df=master_wht"
      ],
      "metadata": {
        "id": "WbF6EoECDQ4D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "NPK_TC is the total fertilizer used in tonnes (1000 kilograms). tot_area is the total area of district in '000 hectares. Therefore,  NPK_TC/tot_area gives us fertilizer use with unit kg/hetcare."
      ],
      "metadata": {
        "id": "YYYLDgaOJMm5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "master_wht['NPK_per_hect']=master_wht['NPK_TC']\n",
        "master_wht=master_wht[master_wht['NPK_TC']>0]\n",
        "master_wht=master_wht[master_wht['tot_area']>0]"
      ],
      "metadata": {
        "id": "YPaEuvhvOJAh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "master_wht['NPK_per_hect']=master_wht['NPK_TC'] /master_wht['tot_area']\n"
      ],
      "metadata": {
        "id": "7LJra8HIHAe8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exploratory Data Analyis"
      ],
      "metadata": {
        "id": "m6gM1uPDS1T3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ferti=master_wht['NPK_per_hect']  #generating a series \n",
        "ferti.describe()\n",
        "p = ferti.plot(kind='hist', color='r', alpha=0.5)\n"
      ],
      "metadata": {
        "id": "J0dLkxoJN6jQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Time trend in Fertilizer use\n",
        "df=master_wht\n",
        "df=df[df['YEAR']>1965]\n",
        "df_ferti=df.groupby('YEAR')['NPK_per_hect'].mean()\n",
        "\n",
        "p = plt.plot(df_ferti.index, df_ferti.values)\n",
        "plt.legend()\n",
        "plt.title('Average Fertilizer Use in Wheat Growing Region in India Over Time')\n",
        "plt. xlabel(\"Calander Year\")\n",
        "plt. ylabel(\"Fertilizer use (kg/hetacre)\")"
      ],
      "metadata": {
        "id": "xHwF6QiqTJeE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ordinary Least Squares: Linear Regression Implementation "
      ],
      "metadata": {
        "id": "yDFud0jPZbM_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import datasets, linear_model\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import statsmodels.api as sm\n",
        "from scipy import stats\n",
        "\n",
        "X=master_wht['wht_yield']\n",
        "y=master_wht['NPK_per_hect']\n",
        "\n",
        "X2 = sm.add_constant(X)  #adding intercept \n",
        "est = sm.OLS(y, X2)   \n",
        "est2 = est.fit()\n",
        "print(est2.summary())  #we obtain model-statistics. Mainly interested in p-value and R-squared."
      ],
      "metadata": {
        "id": "whAoRS6tZasM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We see that p-value is 0.000. Therefore there is strong relationship between the fertilizer use and wheat yield from per unit land"
      ],
      "metadata": {
        "id": "AfByCy3Df0xx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "master_wht.to_csv('master_wht.csv')"
      ],
      "metadata": {
        "id": "ii5_x2jAf_4K"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Analysis of Yield for Rice Growing Regions\n"
      ],
      "metadata": {
        "id": "63NTAneip5dc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "threshold=0.2\n",
        "master_rice=master[master[\"rice_area_fraction\"] > threshold]\n",
        "master_rice['STNAME'].value_counts()  #L\n",
        "\n",
        "master_rice=master_rice[['STCODE','STNAME','DIST', 'DISTNAME', 'YEAR',  'rice_yield', 'NPK_TC', 'tot_area',\n",
        "                        'avg_yield_value', 'rice_yield_value', 'rice_price', 'CANALS', 'TUBEWELL','ANNUAL','JULAUGRF',\n",
        "                        'wht_area_irrg_per','land_nonagri_per', 'mkt', 'rice_area_fraction','N_TC', 'P_TC','K_TC']]\n",
        "master_rice.head()      \n",
        "df=master_rice\n",
        "\n",
        "master_rice['NPK_per_hect']=master_rice['NPK_TC']\n",
        "master_rice=master_rice[master_rice['NPK_TC']>0]\n",
        "master_rice=master_rice[master_rice['tot_area']>0]\n",
        "\n",
        "master_rice['NPK_per_hect']=master_rice['NPK_TC'] /master_rice['tot_area']\n",
        "\n",
        "ferti=master_rice['NPK_per_hect']  #generating a series \n",
        "ferti.describe()\n",
        "p = ferti.plot(kind='hist', color='r', alpha=0.5)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "fCcQZw5fqDKz",
        "outputId": "b8ddc59e-0601-452b-ad22-d9f376fcfb07"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import datasets, linear_model\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import statsmodels.api as sm\n",
        "from scipy import stats\n",
        "\n",
        "X=master_rice['rice_yield']\n",
        "y=master_rice['NPK_per_hect']\n",
        "\n",
        "X2 = sm.add_constant(X)  #adding intercept \n",
        "est = sm.OLS(y, X2)   \n",
        "est2 = est.fit()\n",
        "print(est2.summary())  #we obtain model-statistics. Mainly interested in p-value and R-squared."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Z6_ak0Gfqzqs",
        "outputId": "d0fac73e-562e-4990-a821-d53f5acd1cdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:           NPK_per_hect   R-squared:                       0.084\n",
            "Model:                            OLS   Adj. R-squared:                  0.084\n",
            "Method:                 Least Squares   F-statistic:                     708.0\n",
            "Date:                Sun, 21 Aug 2022   Prob (F-statistic):          2.67e-149\n",
            "Time:                        23:11:22   Log-Likelihood:                -57099.\n",
            "No. Observations:                7697   AIC:                         1.142e+05\n",
            "Df Residuals:                    7695   BIC:                         1.142e+05\n",
            "Df Model:                           1                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "const        -79.2510      9.948     -7.967      0.000     -98.751     -59.751\n",
            "rice_yield   140.1550      5.267     26.608      0.000     129.829     150.481\n",
            "==============================================================================\n",
            "Omnibus:                    13699.748   Durbin-Watson:                   1.647\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         16981342.686\n",
            "Skew:                          12.827   Prob(JB):                         0.00\n",
            "Kurtosis:                     231.673   Cond. No.                         5.03\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/tsatools.py:142: FutureWarning: In a future version of pandas all arguments of concat except for the argument 'objs' will be keyword-only\n",
            "  x = pd.concat(x[::order], 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "master_rice.to_csv('master_rice.csv')"
      ],
      "metadata": {
        "id": "_n-TWgdcq15s"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
